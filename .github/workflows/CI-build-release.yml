name: Build wheels and sdist

on: 
  push:
    branches:
      - main
    # tags:
    #   - 'v*'


jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.buildplat }}-${{ matrix.python }}
    runs-on: ${{ matrix.buildplat }}
    continue-on-error: true
    env:
      # gcc/gfortran version
      version: 13 # versions https://github.com/fortran-lang/setup-fortran/?tab=readme-ov-file#runner-compatibility
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        buildplat: [ubuntu-latest, windows-latest, macos-13, macos-latest] #, ubuntu-24.04-arm] 
        python: [cp39, cp310, cp311, cp312, cp313]

    steps:
      - uses: actions/checkout@main

      # Used to host cibuildwheel
      - uses: actions/setup-python@main
        with:
          python-version: "3.x"
      - name: Set env
        if: ${{ matrix.buildplat == 'macos-13' }}
        run: echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
      - uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: gcc
          version: ${{ env.version }}
      - name: Check gfortran's version
        run: gfortran --version
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        env:
          CIBW_BUILD: ${{ matrix.python }}-* 
          CIBW_SKIP: "*-win32 *i686 *musllinux*"
        with:
          output-dir: wheelhouse

      - uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.python }}-${{ matrix.buildplat }} 
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@main
        with:
          name: SDist 
          path: dist/*.tar.gz

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
    - build_sdist
    - build_wheels
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@main
      with:
        name: python-package-distributions
        path: dist/
    - name: Download all the wheels
      uses: actions/download-artifact@main
      with:
        name: python-package-distributions
        path: wheelhouse/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@main
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./wheelhouse/*.whl

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create        
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --generate-notes
        --title 'SILEXlight ${{ github.ref_name }}'
    
   
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
    - build_sdist
    - build_wheels
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/SILEXlight  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1


